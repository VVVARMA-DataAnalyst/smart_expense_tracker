import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.76.1";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const authHeader = req.headers.get("Authorization")!;
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseKey = Deno.env.get("SUPABASE_ANON_KEY")!;
    const lovableApiKey = Deno.env.get("LOVABLE_API_KEY")!;

    const supabase = createClient(supabaseUrl, supabaseKey, {
      global: { headers: { Authorization: authHeader } },
    });

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error("Unauthorized");

    // Get transactions for past 3 months
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

    const { data: transactions, error: txError } = await supabase
      .from("transactions")
      .select("amount, category_id, categories(name)")
      .eq("user_id", user.id)
      .gte("date", threeMonthsAgo.toISOString());

    if (txError) throw txError;

    if (!transactions || transactions.length === 0) {
      return new Response(JSON.stringify({ message: "No transactions found" }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // Summarize spending
    const categorySpending = new Map<string, { total: number; count: number; name: string }>();
    for (const t of transactions) {
      const catId = t.category_id || "uncategorized";
      const catName = t.categories?.name || "Uncategorized";
      if (!categorySpending.has(catId)) {
        categorySpending.set(catId, { total: 0, count: 0, name: catName });
      }
      const cat = categorySpending.get(catId)!;
      cat.total += Number(t.amount);
      cat.count += 1;
    }

    const spendingSummary = Array.from(categorySpending.values())
      .map((v) => `${v.name}: $${v.total.toFixed(2)} (${v.count} txns)`)
      .join("\n");

    const prompt = `You are an expert financial advisor. Based on this user's spending data, create 3-5 clear, actionable savings recommendations.

Spending Summary:
${spendingSummary}

Return recommendations in this **strict JSON format**:
[
  {
    "title": "string",
    "description": "string",
    "potential_savings": number
  }
]`;

    const aiRes = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${lovableApiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: "Respond ONLY in JSON format with no extra text." },
          { role: "user", content: prompt },
        ],
      }),
    });

    const aiData = await aiRes.json();
    const text = aiData?.choices?.[0]?.message?.content?.trim();
    console.log("AI raw output:", text);

    let parsed: any[] = [];
    try {
      parsed = JSON.parse(text);
    } catch {
      console.error("Failed to parse AI response, using fallback format.");
    }

    if (!Array.isArray(parsed) || parsed.length === 0) {
      throw new Error("No recommendations generated by AI");
    }

    const recommendations = parsed.map((r) => ({
      user_id: user.id,
      recommendation_type: "savings",
      title: r.title,
      description: r.description,
      potential_savings: r.potential_savings || null,
      is_dismissed: false,
      is_applied: false,
      created_at: new Date().toISOString(),
    }));

    const { error: insertError } = await supabase.from("recommendations").insert(recommendations);
    if (insertError) throw insertError;

    return new Response(
      JSON.stringify({
        message: "Recommendations generated successfully",
        recommendations,
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Error generating recommendations:", error);
    return new Response(
      JSON.stringify({ error: error.message || "Unknown error" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
